# Specify a port for local testing to avoid collision with 8080
server.port=8081

# Enable live restart of springboot devtool
spring.devtools.restart.enabled=true

# set application logging to DEBUG to facilitate development
logging.level.com.jeffrey.example=DEBUG

# Enable HTTP response compression
server.compression.enabled=true

# list of MIME types that should be compressed
server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain

# Minimum response size (in bytes) that is required for compression to be performed (default is 2048)
server.compression.min-response-size=1024

# Maximum time for any static web content should be cached (in seconds)
spring.resources.cache.cachecontrol.max-age=3600

# The cache must re-validate stale resources with the server.
# Any expired resources must not be used without re-validating.
spring.resources.cache.cachecontrol.must-revalidate=true

# Disable security to allow access actuator sensitive endpoints
# (includes environment, health, beans, metrics, trace, configprops, and dump)
management.security.enabled=false
management.endpoints.web.expose=health, info, env, metrics

management.endpoints.web.exposure.include=*
#management.endpoints.web.exposure.include=health, info, env, metrics, bindings

# Spring Actuator Info Endpoint Configuration
management.info.git.mode=full

# Local RabbitMQ config
#spring.rabbitmq.host=localhost
#spring.rabbitmq.port=5672
#spring.rabbitmq.connection-timeout=60000
#spring.rabbitmq.username=guest
#spring.rabbitmq.password=guest
#spring.rabbitmq.publisher-confirms=true
#spring.rabbitmq.publisher-returns=true

# Comma-separated list of RabbitMQ node addresses in the cluster
# Connect to RabbitMQ cluster and fail-over at the client-side regardless a HA-proxy
#spring.rabbitmq.addresses=localhost:5674,localhost:5672
#spring.rabbitmq.requested-heartbeat=15000

########################################################################################################
# Connecting to a MongoDB default database using 3.x driver
# default connect to local mongo if not specified
# - set the connectTimeoutMS to 7000 milliseconds to attempt a connection before timing out
# - set the socketTimeoutMS to 6000 milliseconds to attempt a send or receive on a socket
# - set the serverSelectionTimeoutMS to 5000 milliseconds to block for server selection before throwing an exception
########################################################################################################
#spring.data.mongodb.uri=mongodb://127.0.0.1:27017/test?connectTimeoutMS=7000&socketTimeoutMS=6000&serverSelectionTimeoutMS=5000

########################################################################################################
# Connecting to a MongoDB replica set named replocal with members running on the specified hosts
# connects to a replica set with:
# - distributes reads to the secondaries (must be primary within transaction)
# - write concern configured to wait for replication
# to succeed across a majority of the data-bearing voting members, with a two-second timeout.
#
# Read-operations can be served by any slave, so you can increase read-performance by
# adding more slaves to the replica-set (provided that your client application is capable
# to actually use different set-members). But write-operations always take place on the
# master of the replica-set and are then propagated to the slaves, so writes won't get
# faster when you add more slaves.
#
# Replica-sets also offer fault-tolerance. When one of the members of the replica-set goes down,
# the others take over. When the master goes down, the slaves will elect a new master. For that
# reason it is suggested for productive deployment to always use MongoDB as a replica-set of at
# least three servers, two of them holding data (the third one is a data-less "arbiter" which is
# required for determining a new master when one of the slaves goes down).
#
# For better illustration on MongoDB unavailable scenarios, specify the following timeouts
# - set the connectTimeoutMS to 7000 milliseconds to attempt a connection before timing out
# - set the socketTimeoutMS to 6000 milliseconds to attempt a send or receive on a socket
# - set the serverSelectionTimeoutMS to 5000 milliseconds to block for server selection before throwing an exception
########################################################################################################
### use this with embedded mongo cluster
#spring.data.mongodb.uri=mongodb://localhost:27017,localhost:27018/test?replicaSet=replocal&w=majority&wtimeoutMS=2000&connectTimeoutMS=7000&socketTimeoutMS=6000&serverSelectionTimeoutMS=5000

### use this with localhost mongodb cluster
#spring.data.mongodb.uri=mongodb://127.0.0.1:27017,127.0.0.1:27018/test?replicaSet=replocal&readPreference=secondary&w=majority&wtimeoutMS=2000
spring.data.mongodb.uri=mongodb://127.0.0.1:27017,127.0.0.1:27018/test?replicaSet=replocal&w=majority&wtimeoutMS=2000&connectTimeoutMS=7000&socketTimeoutMS=6000&serverSelectionTimeoutMS=5000
