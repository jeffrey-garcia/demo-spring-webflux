# set application logging to DEBUG to facilitate development
logging.level.com.jeffrey.example=DEBUG

########################################################################################################
# Connecting to a MongoDB replica set named replocal with members running on the specified hosts
# connects to a replica set with:
# - distributes reads to the secondaries (must be primary within transaction)
# - write concern configured to wait for replication
# to succeed across a majority of the data-bearing voting members, with a two-second timeout.
#
# Read-operations can be served by any slave, so you can increase read-performance by
# adding more slaves to the replica-set (provided that your client application is capable
# to actually use different set-members). But write-operations always take place on the
# master of the replica-set and are then propagated to the slaves, so writes won't get
# faster when you add more slaves.
#
# Replica-sets also offer fault-tolerance. When one of the members of the replica-set goes down,
# the others take over. When the master goes down, the slaves will elect a new master. For that
# reason it is suggested for productive deployment to always use MongoDB as a replica-set of at
# least three servers, two of them holding data (the third one is a data-less "arbiter" which is
# required for determining a new master when one of the slaves goes down).
#
########################################################################################################
### use this with embedded mongo cluster
spring.data.mongodb.uri=mongodb://localhost:27017,localhost:27018/test?replicaSet=replocal&w=majority&wtimeoutMS=2000

### use this with localhost mongodb cluster
#spring.data.mongodb.uri=mongodb://127.0.0.1:27017,127.0.0.1:27018/test?replicaSet=replocal&readPreference=secondary&w=majority&wtimeoutMS=2000
#spring.data.mongodb.uri=mongodb://127.0.0.1:27017,127.0.0.1:27018/test?replicaSet=replocal&w=majority&wtimeoutMS=2000